# Install and load the necessary packages if not already installed
suppressPackageStartupMessages({
  
  library(data.table)
  library(dplyr)
  library(lubridate)
  
})
library(dplyr)

source('/home/ivm/project_migraine/file_paths.R')
 

PREVALENCE_CUTOFF=1; #prevalence of ednpoint_x in group of interest (e.g. at least 1% of F1 had experienced the endpoint x)

association_analysis_logistic <- function(dataset, response_variable, PREVALENCE=TRUE) {
  # Create a matrix for results
  results <- matrix(NA, nrow=length(dataset), ncol = 2,dimnames = list(colnames(dataset), c( "Beta", "P-value"))) #check chagne ep_F1 to dataset
  
# Loop through the columns of the dataset
for (column in colnames(dataset)) {

  if (column != response_variable & (column != "FINNGENID") & column != "SEX_binary" & column != "EVENT_AGE"  & column != "BIRTH_DATE" & column != "year_purch" & column !="year_birth") 
    { 
    if (PREVALENCE) 
      {
        #Check if there is at least PREVALENCE(%) cases in 2x2 matrix
          contingency_table <- table(dataset[[response_variable]], dataset[[column]])
          percentage_contingency_table <- prop.table(contingency_table,1) * 100
          if (!is.na(percentage_contingency_table[4]) & percentage_contingency_table[4]>=PREVALENCE_CUTOFF)
          { 
            #Perform the regression only if |correlation| between response andl endpoint is >0.01
            correlation <- cor(as.numeric(dataset[[response_variable]]), as.numeric(dataset[[column]])) 
            if (abs(correlation) >= 0.01 &  !is.na(correlation) & correlation!="NA")
           {
         #Fit a logistic regression model
             model <- glm(as.formula(paste(response_variable, "~ SEX_binary + EVENT_AGE  +", column)), data = dataset, family="binomial") 
      
         #Get Beta and p-value
             beta <- coef(model)
             p_value <- summary(model)$coefficients[, "Pr(>|z|)"]
      
        # Save the results in the matrix
             results[column, "Beta"] <- beta[4] 
             results[column, "P-value"] <- p_value[4] 
            }
          }
      }
    else 
        {
        # If PREVALENCE is FALSE, perform regression without prevalence and correlation checks
        model <- glm(as.formula(paste(response_variable, "~ SEX_binary + EVENT_AGE +", column)), data = dataset, family="binomial") 
       
        beta <- coef(model)
        p_value <- summary(model)$coefficients[, "Pr(>|z|)"]
        
        results[column, "Beta"] <- beta[4] 
        results[column, "P-value"] <- p_value[4] 
        }
   }
}  
  # Remove rows with NA values in both 'Beta' and 'P_Value'
  results <- as.data.frame(results)
  results <- results[complete.cases(results$Beta, results$P_Value), ]
  
  # Return the matrix of results
  return(results)
}

save_results <- function(results, filename){
  output_path= "/home/ivm/project_migraine/output/"
  output_filename = paste0(output_path,filename)
  write.csv(results, output_filename, row.names = FALSE)
}


# fetch cohort information
cohort <- fread(study_population_file) %>% arrange(FINNGENID, EVENT_AGE) %>% group_by(FINNGENID) %>% slice(1) %>% 
  mutate(SEX_binary=  as.numeric(SEX == "female"), #Recode (1 for Female, 0 for Male)
         year_purch=as.numeric(format(as.Date(DATE_FIRST_PURCH, format="%d/%m/%Y"),"%Y")),
         year_birth=as.numeric(format(as.Date(BIRTH_DATE, format="%Y-%m-%d"),"%Y"))) %>%  select(FINNGENID, F1,F2,F3,control_e, DATE_FIRST_PURCH, EVENT_AGE, SEX_binary, year_birth,year_purch) 

# fetch extra information and evaluate associations
file_list = c(endpoint_file, medication_file,prev_med_file,SES_file)
name_list = c('endpoint','medication','prev_med','SES')
my_matrix <- data.frame()

for( i in c(1,2,3,4) ){
  
  file = file_list[i]
  name = name_list[i]
  
  
  if (name!="SES") {
  DB <- fread(file, sep = ',') %>%
    left_join(cohort, by = "FINNGENID")  %>%
    select(-date_of_birth, -start_of_followup, -end_of_followup, -DATE_FIRST_PURCH)
  }
  else
  {
    DB <- fread(file, sep = ',') %>%
      left_join(cohort, by = "FINNGENID") %>%
      select(-DATE_FIRST_PURCH)
  }
  
  if (name=="prev_med") { colnames(DB)[c(2:9)] <- paste(colnames(DB)[2:9], 'prev', sep = '_')} #look into (2:9 are the columns with ATC codes, if necessary modify)
 
   # Get estimates for F1, F2, F3, and controls
  #F1
  ep_F1 <- DB %>% filter(F1==1|control_e==1) %>% select(-F2,-F3,-control_e)
  response_variable <- "F1"
  if (name!="SES") {  results_association_F1 <- association_analysis_logistic(ep_F1, response_variable) }
  else {  results_association_F1 <- association_analysis_logistic(ep_F1, response_variable,FALSE)  }

  if(i==1){  F1_association <- rbind(my_matrix, results_association_F1) }
  else {  F1_association <- rbind(F1_association, results_association_F1)  }
  
  filename = paste0("association_",name,response_variable,".csv")
  save_results(results_association_F1,filename)
  
  #F2
  my_matrix <- data.frame()
  ep_F2 <- DB %>% filter(F2==1|control_e==1) %>% select(-F1,-F3,-control_e)
  response_variable <- "F2"
  if (name!="SES") {  results_association_F2 <- association_analysis_logistic(ep_F2, response_variable) }
  else {results_association_F2 <- association_analysis_logistic(ep_F2, response_variable,FALSE)  }
  
  if(i==1){  F2_association <- rbind(my_matrix, results_association_F2) }
  else {  F2_association <- rbind(F2_association, results_association_F2)  }
    filename = paste0("association_",name,response_variable,".csv")
  save_results(results_association_F2,filename)
  
  #F3
  ep_F3 <- DB %>% filter(F3==1|control_e==1) %>% select(-F1,-F2,-control_e)
  response_variable <- "F3"
  if (name!="SES") {  results_association_F3 <- association_analysis_logistic(ep_F3, response_variable) }
  else {results_association_F3 <- association_analysis_logistic(ep_F3, response_variable,FALSE)  }
  
  if(i==1){  F3_association <- rbind(my_matrix, results_association_F3) }
  else {  F3_association <- rbind(F3_association, results_association_F3)  }
    filename = paste0("association_",name,response_variable,".csv")
  save_results(results_association_F3,filename)
  
  #CTRL
  ep_CTRL <- DB %>% select(-F1,-F2,-F3)
  response_variable <- "control_e"
  if (name!="SES") {  results_association_CTRL <- association_analysis_logistic(ep_CTRL, response_variable) }
  else {results_association_CTRL <- association_analysis_logistic(ep_CTRL, response_variable,FALSE)  }
  
  if(i==1){  CTRL_association <- rbind(my_matrix, results_association_CTRL) }
  else {  CTRL_association <- rbind(CTRL_association, results_association_CTRL)  }
  filename = paste0("association_",name,response_variable,".csv")
    save_results(results_association_CTRL,filename)
}

rm(results_association_CTRL,results_association_F1,results_association_F2,results_association_F3,my_matrix)

# Adjust for FDR
F1_association <- F1_association %>%  mutate(FDR_p_values = p.adjust(`P-value`, method = "BH")) %>% arrange(FDR_p_values) %>% rownames_to_column("ENDPOINT")
F2_association <- F2_association %>%  mutate(FDR_p_values = p.adjust(`P-value`, method = "BH")) %>% arrange(FDR_p_values) %>% rownames_to_column("ENDPOINT")
F3_association <- F3_association %>%  mutate(FDR_p_values = p.adjust(`P-value`, method = "BH")) %>% arrange(FDR_p_values) %>% rownames_to_column("ENDPOINT")
CTRL_association <- CTRL_association %>%  mutate(FDR_p_values = p.adjust(`P-value`, method = "BH")) %>% arrange(FDR_p_values) %>% rownames_to_column("ENDPOINT")

# PLOT Betas F1 vs F2, etc
Beta_F1 <- F1_association %>% rename(Beta_F1=Beta, pval_F1=FDR_p_values) %>% mutate(sign_F1= ifelse(pval_F1<0.05,1,0))
Beta_F2 <- F2_association %>% rename(Beta_F2=Beta, pval_F2=FDR_p_values) %>% mutate(sign_F2= ifelse(pval_F2<0.05,1,0))
Beta_F3 <- F3_association %>% rename(Beta_F3=Beta, pval_F3=FDR_p_values) %>% mutate(sign_F3= ifelse(pval_F3<0.05,1,0))

my_betas <- Beta_F1 %>% full_join(Beta_F2, by="ENDPOINT") %>% full_join(Beta_F3, by="ENDPOINT") %>% full_join(Beta_CTRL, by="ENDPOINT")
 # F1 vs F2  
  ggplot(my_betas, aes(x = Beta_F1, y = Beta_F2, color = interaction(sign_F1, sign_F2), shape = interaction(sign_F1, sign_F2))) +
  geom_point(size = 3, fill = "white") +  
  geom_text(aes(label = endpoint), vjust = 1.5, hjust = 0.5) +
  geom_abline(linetype="dashed",intercept = 0, slope = 1) +
  geom_hline(yintercept = 0,  color = "black") +  
  geom_vline(xintercept = 0,  color = "black") +   
  scale_color_manual(
    values = c("0.0" = "lightgray", "1.0" = "yellow", "0.1" = "blue", "1.1" = "green"),
    labels = c("Both n.s.", "Only F1", "Only F2", "Both F1 F2")
  ) +
  scale_shape_manual(
    values = c("0.0" = 16, "1.0" = 17, "0.1" = 15, "1.1" = 18),
    labels = c("Both n.s.", "Only F1", "Only F2", "Both F1 F2")
  ) +
  labs(title = "",
       x = "Beta F1",
       y = "Beta F2",
       color = "Significance",
       shape = "Significance") +
  theme_minimal()


# PLOTS ONLY SIGNIFICATIVE COEFFICIENTS

# PLOTS coefficients
Beta_F1_sign <- F1_association %>% filter(FDR_p_values < 0.05)
Beta_F2_sign <- F2_association %>% filter(FDR_p_values < 0.05)
Beta_F3_sign <- F3_association %>% filter(FDR_p_values < 0.05)
Beta_CTRL_sign <- CTRL_association %>% filter(FDR_p_values < 0.05)

### PLOT BETAS by Type of Switching ###
betas <- bind_rows(Beta_F1_sign,
                   Beta_F2_sign,
                   Beta_F3_sign,
                   Beta_CTRL_sign,
                   .id="Model"
                   ) %>% mutate( type_failure= as.factor(case_when(
                     Model==1 ~ "F1",
                     Model==2 ~ "F2",
                     Model==3 ~ "F3",
                     Model==4 ~ "CTRL",
                     TRUE~"None"
                   )))

ggplot(betas, aes(x= reorder(ENDPOINT,-Beta), y= Beta, color=type_failure))+
         geom_point(position=position_dodge(width=0.2), size=3)+
         labs(x="Variable",
              y="Beta")+
         theme_minimal()+
         theme(axis.text.x= element_text(angle=45,hjust=1))



